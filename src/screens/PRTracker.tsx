// src/screens/PRTracker.tsx
import React, { useEffect, useState, useMemo } from "react";

import { View, Text, TextInput, ScrollView, Pressable, Alert, Share, Platform, Switch } from "react-native";
import { colors } from "../theme/colors";
import {
  loadTracker,
  getTimeline,
  setMilestoneDate,
  setMilestoneNotes,
  markToday,
  clearAllMilestones,
  type Milestone,
  type MilestoneID,
} from "../services/tracker";



// Simple YYYY-MM-DD checker (local timezone safe enough for display)
function isValidYYYYMMDD(s: string | null | undefined) {
  if (!s) return true; // empty is allowed; we show helper text anyway
  if (!/^\d{4}-\d{2}-\d{2}$/.test(s)) return false;
  const t = Date.parse(s);
  return !Number.isNaN(t);
}




const EXPLAIN: Record<string, string> = {
  aor: "You submitted your PR application. IRCC will email AOR soon.",
  biometrics_letter: "IRCC asks you to give fingerprints and photo.",
  biometrics_done: "You visited the VAC/centre and gave biometrics.",
  med_passed: "Your immigration medical exam was reviewed and passed.",
  adr_received: "IRCC requested additional documents (ADR).",
  adr_submitted: "You uploaded/sent the requested documents.",
  eligibility_passed: "IRCC accepted that you meet program rules.",
  bg_completed: "Security/background checks are done.",
  ppr_or_portal1: "Approval email or PR Confirmation Portal invite arrived.",
  ecopr_or_copr: "You received your PR confirmation (eCOPR/CoPR).",
  pr_card_received: "Your plastic PR card arrived by mail.",
};


const rowPad = 12;

export default function PRTracker() {
  const [loading, setLoading] = useState(true);
  const [state, setState] = useState<{ milestones: Milestone[] }>({ milestones: [] });
  

  
  const [showCompletedOnly, setShowCompletedOnly] = useState(false);
  const filtered = useMemo(
    () => (showCompletedOnly ? state.milestones.filter(m => !!m.dateISO) : state.milestones),
    [showCompletedOnly, state.milestones]
  );


  useEffect(() => {
    (async () => {
      setLoading(true);
      const st = await loadTracker();
      setState({ milestones: getTimeline(st) });
      setLoading(false);
    })();
  }, []);

  const doneCount = useMemo(() => state.milestones.filter(m => !!m.dateISO).length, [state.milestones]);

  async function onSetDate(id: MilestoneID, dateISO: string | null) {
    const st = await setMilestoneDate(id, dateISO);
    setState({ milestones: getTimeline(st) });
  }

  async function onSetNotes(id: MilestoneID, notes: string | null) {
    const st = await setMilestoneNotes(id, notes);
    setState({ milestones: getTimeline(st) });
  }

  async function onMarkToday(id: MilestoneID) {
    const st = await markToday(id);
    setState({ milestones: getTimeline(st) });
  }

  async function onResetAll() {
    Alert.alert("Reset tracker?", "This clears all milestone dates and notes.", [
      { text: "Cancel", style: "cancel" },
      {
        text: "Reset",
        style: "destructive",
        onPress: async () => {
          const st = await clearAllMilestones();
          setState({ milestones: getTimeline(st) });
        },
      },
    ]);
  }
  function buildSummary(ms: Milestone[]) {
  const lines: string[] = [];
  lines.push("PR application tracker — summary");
  lines.push("");
  ms.forEach((m, i) => {
    const date = m.dateISO ? m.dateISO : "—";
    lines.push(`${i + 1}. ${m.title} — ${date}`);
    if (m.notes && m.notes.trim()) lines.push(`   Notes: ${m.notes.trim()}`);
  });
  lines.push("");
  lines.push("Generated by MapleSteps");
  return lines.join("\n");
}

async function onExportText() {
  const summary = buildSummary(state.milestones);
  try {
    await Share.share({ message: summary });
  } catch (e) {
    Alert.alert("Share failed", String(e));
  }
}

async function onExportPDF() {
  // Build plain-text summary once
  const summaryText = buildSummary(state.milestones);

  // Also build HTML (for native expo-print)
  const summaryHtml = summaryText
    .split("\n")
    .map(l => l.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;"))
    .join("<br/>");

  // A4-styled HTML (used on native)
  const html = `
    <html>
      <head>
        <meta charset="utf-8" />
        <title>PR tracker — export</title>
        <style>
          @page { size: A4; margin: 18mm; }
          html, body { height: 100%; }
          body { 
            font-family: -apple-system, Segoe UI, Roboto, Arial, sans-serif; 
            font-size: 12pt; 
            color: #111827; 
          }
          h1 { font-size: 18pt; margin: 0 0 10pt; }
          .muted { color: #6b7280; font-size: 9pt; margin-bottom: 12pt; }
          .box { 
            border: 1px solid #e5e7eb; 
            border-radius: 8px; 
            padding: 12pt; 
            white-space: pre-wrap; 
            line-height: 1.35;
          }
          .wrap { max-width: 180mm; }
        </style>
      </head>
      <body>
        <div class="wrap">
          <h1>PR application tracker — export</h1>
          <div class="muted">MapleSteps • ${new Date().toLocaleString()}</div>
          <div class="box">${summaryHtml}</div>
        </div>
      </body>
    </html>
  `;

  const fname = `MapleSteps_PR_Tracker_${new Date().toISOString().slice(0,10)}.pdf`;

  if (Platform.OS === "web") {
    // ✅ Web: generate the PDF directly (no page print), then download
    const { jsPDF } = await import("jspdf");
    const doc = new jsPDF({ unit: "pt", format: "a4" }); // 595x842pt

    const left = 52;          // ~18mm
    const top  = 52;
    const width = 595 - left * 2;

    doc.setFont("helvetica", "normal");

    doc.setFontSize(18);
    doc.text("PR application tracker — export", left, top);

    doc.setFontSize(10);
    doc.setTextColor(107,114,128);
    doc.text(`MapleSteps • ${new Date().toLocaleString()}`, left, top + 16);

    doc.setTextColor(17,24,39);
    doc.setFontSize(12);

    const boxTop = top + 32;
    // simple box border
    doc.setDrawColor(229,231,235);
    doc.roundedRect(left, boxTop, width, 0, 8, 8); // header line; height grows with text

    const lines = doc.splitTextToSize(summaryText, width - 24);
    const contentX = left + 12;
    const contentY = boxTop + 18;

    // Draw the actual text
    doc.text(lines, contentX, contentY);

    // Close the box to content height
    const contentHeight = (lines.length) * 14; // ~14pt line-height
    doc.roundedRect(left, boxTop, width, contentHeight + 24, 8, 8); // border around content

    doc.save(fname);
    return;
  }

  // ✅ Native (Android/iOS): use expo-print to generate the same summary from HTML
  try {
    const Print = await import("expo-print");
    const { uri } = await Print.printToFileAsync({ html });

    try {
      const Sharing = await import("expo-sharing");
      if (await Sharing.isAvailableAsync()) {
        await Sharing.shareAsync(uri, { dialogTitle: fname });
        return;
      }
    } catch {
      // expo-sharing not available — fall back to Share API
    }

    await Share.share({ url: uri, message: "PR tracker export", title: fname });
  } catch (e) {
    Alert.alert(
      "PDF export error",
      "If this keeps happening, try reinstalling optional deps:\n\nexpo install expo-print expo-sharing\n\n" + String(e ?? "")
    );
  }
}


  return (
    <ScrollView
      contentContainerStyle={{ padding: 16, backgroundColor: "#fff" }}
      style={{ flex: 1, backgroundColor: "#fff" }}
    >
      <Text style={{ fontSize: 22, fontWeight: "700", color: colors.text, marginBottom: 4 }}>
  PR application tracker
</Text>
<Text style={{ color: "#6b7280", marginBottom: 14 }}>
  Record your post-submission milestones from “Application submitted” to “PR card received.” Dates use the Canadian standard:{" "}
  <Text style={{ fontWeight: "600" }}>YYYY-MM-DD</Text>.
</Text>



      <View
        style={{
          marginBottom: 14,
          padding: 12,
          borderWidth: 1,
          borderColor: "#eef2f7",
          borderRadius: 12,
          backgroundColor: "#fafafa",
        }}
      >
        <Text style={{ color: "#374151" }}>
          Completed: <Text style={{ fontWeight: "700" }}>{doneCount}</Text> / {state.milestones.length}
        </Text>
        {!loading && (
          <Pressable
            onPress={onResetAll}
            style={{
              alignSelf: "flex-start",
              marginTop: 8,
              backgroundColor: colors.slate,
              paddingVertical: 8,
              paddingHorizontal: 12,
              borderRadius: 8,
            }}
          >
            <Text style={{ color: "#fff", fontWeight: "600" }}>Reset all</Text>
          </Pressable>
        )}
      </View>
        {/* Filter toggle */}
<View style={{ flexDirection: "row", alignItems: "center", marginBottom: 10, gap: 10 }}>
  <Text style={{ color: "#374151", fontWeight: "600" }}>Show completed only</Text>
  <Switch
    value={showCompletedOnly}
    onValueChange={setShowCompletedOnly}
    trackColor={{ false: "#e5e7eb", true: colors.navy }}
    thumbColor={Platform.OS === "android" ? "#ffffff" : undefined}
    accessibilityLabel="Show completed only"
  />
</View>


{/* Export buttons */}
<View style={{ flexDirection: "row", alignItems: "center", marginBottom: 12 }}>
  <Pressable
    onPress={onExportText}
    style={{
      backgroundColor: colors.navy,
      paddingVertical: 8,
      paddingHorizontal: 12,
      borderRadius: 8,
      marginRight: 8,
    }}
  >
    <Text style={{ color: "#fff", fontWeight: "700" }}>Export (text)</Text>
  </Pressable>

  <Pressable
    onPress={onExportPDF}
    style={{
      backgroundColor: colors.slate,
      paddingVertical: 8,
      paddingHorizontal: 12,
      borderRadius: 8,
    }}
  >
    <Text style={{ color: "#fff", fontWeight: "700" }}>Export PDF</Text>
  </Pressable>
</View>

      {/* Timeline */}
      <View>
        {filtered.map((m, idx) => (
        <TimelineRow
          key={m.id}
          milestone={m}
          isLast={idx === filtered.length - 1}

            onSetDate={onSetDate}
            onMarkToday={onMarkToday}
            onSetNotes={onSetNotes}
          />
        ))}
      </View>

      <View style={{ height: 24 }} />
    </ScrollView>
  );
}

function TimelineRow({
  milestone,
  isLast,
  onSetDate,
  onMarkToday,
  onSetNotes,
}: {
  milestone: Milestone;
  isLast: boolean;
  onSetDate: (id: MilestoneID, dateISO: string | null) => void | Promise<void>;
  onMarkToday: (id: MilestoneID) => void | Promise<void>;
  onSetNotes: (id: MilestoneID, notes: string | null) => void | Promise<void>;
}) {
  const done = !!milestone.dateISO;

  return (
    <View style={{ flexDirection: "row", alignItems: "stretch" }}>
      {/* Left rail: dot + connector */}
      <View style={{ width: 28, alignItems: "center" }}>
        <View
          style={{
            width: 12,
            height: 12,
            borderRadius: 6,
            marginTop: rowPad,
            backgroundColor: done ? colors.mapleRed : "#d1d5db",
          }}
        />
        {!isLast && (
          <View style={{ width: 2, flex: 1, backgroundColor: "#e5e7eb" }} />
        )}
      </View>

      {/* Right content */}
      <View
        style={{
          flex: 1,
          paddingVertical: rowPad,
          borderBottomWidth: isLast ? 0 : 1,
          borderBottomColor: "#f1f5f9",
        }}
      >
        <Text style={{ fontSize: 16, fontWeight: "600", color: colors.text }}>
          {milestone.title}
        </Text>
{!!EXPLAIN[milestone.id] && (
  <Text style={{ color: "#6b7280", marginTop: 4 }}>
    {EXPLAIN[milestone.id]}
  </Text>
)}

        {/* Date row */}
<View style={{ flexDirection: "row", alignItems: "center", marginTop: 8, gap: 8 }}>
  <TextInput
    placeholder="YYYY-MM-DD"
    value={milestone.dateISO ?? ""}
    onChangeText={(t) => onSetDate(milestone.id, t.trim() || null)}
    style={{
      borderWidth: 1,
      borderColor: isValidYYYYMMDD(milestone.dateISO) ? "#e5e7eb" : "#ef4444",
      borderRadius: 8,
      paddingVertical: 8,
      paddingHorizontal: 10,
      minWidth: 150,
      fontVariant: ["tabular-nums"],
    }}
    inputMode="text"
    autoCapitalize="none"
    autoCorrect={false}
  />

  <Pressable
    onPress={() => onMarkToday(milestone.id)}
    style={{
      backgroundColor: colors.navy,
      paddingVertical: 8,
      paddingHorizontal: 12,
      borderRadius: 8,
    }}
  >
    <Text style={{ color: "#fff", fontWeight: "600" }}>Set today</Text>
  </Pressable>

  {!!milestone.dateISO && (
    <Pressable
      onPress={() => onSetDate(milestone.id, null)}
      style={{
        backgroundColor: "#ef4444",
        paddingVertical: 8,
        paddingHorizontal: 12,
        borderRadius: 8,
      }}
    >
      <Text style={{ color: "#fff", fontWeight: "600" }}>Clear</Text>
    </Pressable>
  )}
</View>

{/* Helper below the date row */}
<Text style={{ color: "#6b7280", fontSize: 12, marginTop: 6 }}>
  Tip: Enter dates as YYYY-MM-DD (e.g., 2025-10-04). Use the date on the IRCC email/letter.
</Text>


        {/* Notes */}
        <TextInput
          placeholder="Notes (optional)"
          value={milestone.notes ?? ""}
          onChangeText={(t) => onSetNotes(milestone.id, t)}
          style={{
            borderWidth: 1,
            borderColor: "#e5e7eb",
            borderRadius: 8,
            paddingVertical: 8,
            paddingHorizontal: 10,
            marginTop: 8,
          }}
          multiline
        />

        {/* Footer meta */}
        <Text style={{ color: "#9ca3af", fontSize: 12, marginTop: 6 }}>
          {milestone.dateISO ? "Recorded" : "Not recorded"}
          {milestone.dateISO ? ` • ${milestone.dateISO}` : ""}
        </Text>
      </View>
    </View>
  );
}
